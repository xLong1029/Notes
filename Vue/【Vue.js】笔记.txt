Vue.js（读音 /vjuː/，类似于 view）
	是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，它不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。
		

Vue.js 特点
	简洁： HTML 模板 + JSON 数据，再创建一个 Vue 实例，就这么简单。
	数据驱动： 自动追踪依赖的模板表达式和计算属性。
	组件化： 用解耦、可复用的组件来构造界面。
	轻量： ~24kb min+gzip，无依赖。
	快速： 精确有效的异步批量 DOM 更新。
	模块友好： 通过 NPM 或 Bower 安装，无缝融入你的工作流。


例子：
	<template>
	  <div class="hello">
	    <h1>{{ msg }}</h1>
	    <input v-model="msg">
	    <ul>
	      <li v-for="item in list">
	        {{ item.text }}
	      </li>
	    </ul>
	  </div>
	</template>

	<script>
	  export default {
	    name: 'hello',
	    data () {
	      return {
	        msg: '卧槽，我在测试vue页面，你敢信?',
	        list: [
	          {text: '列表一'},
	          {text: '列表二'},
	          {text: '列表三'}
	        ]
	      }
	    }
	  }
	</script>

	<!-- "scoped" 表示只在当前页使用该样式，不污染全局样式 -->
	<style scoped>
	  h1, h2 {
	    font-weight: normal;
	  }

	  ul {
	    list-style-type: none;
	    padding: 0;
	  }

	  li {
	    display: inline-block;
	    margin: 0 10px;
	  }

	  a {
	    color: #42b983;
	  }

	  input{
	    width: 300px;
	    height: 40px;
	    line-height: 40px;
	    text-align: center;
	  }

	  //可以用外部引用的方式
	  @import '/static/css/xx.css'
	</style>

Vue.js 样式绑定
	class 与 style 是 HTML 元素的属性，用于设置元素的样式，我们可以用 v-bind 来设置样式属性。
	Vue.js v-bind 在处理 class 和 style 时， 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。

	例子：
		<!-- 完整语法 -->
		<a v-bind:href="url"></a>
		<!-- 缩写 -->
		<a :href="url"></a>


Vue.js 标签属性数据绑定和拼接

	例子：
		<tr v-for="item in Strategys" class="ng-scope">
			<td>
			　　<a class="ng-binding ng-scope" v-bind:href="['xxx/detail/'+item.Id]" >{{item.Name}}</a>
			</td>
		</tr>

		数据块代码

		var vm = new Vue({
		　　el: '#section-strategies',
		　　data: {
		　　　　　　parentMessage: 'Parent',
		　　　　　　StrategyCnt:0,
		　　　　　　Strategys: [{id:1,name:'文章1'}，{id:2,name:'文章2'}]
		　　}
		})


Vue.js <router-link>和<a>跳转地址设置
	<router-link to="/home"></router-link>
	<a href="/#/home"></a>

	*router-link他会自己带上路由的连接#： 输出localhost:8080/#/home


Vue.js 组件之间的通信，数据传递
	父传子：Props
	子传父：子：$emit(eventName) 父$on(eventName)
	父访问子：ref