React认为一个组件应该具有如下特征：

（1）可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件；

（2）可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景；

（3）可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护；


HTML基础结构：
	<!DOCTYPE html>
	<html>
	  <head>
	    <script src="../build/react.js"></script>
	    <script src="../build/react-dom.js"></script>
	    <script src="../build/browser.min.js"></script>
	  </head>
	  <body>
	    <div id="example"></div>
	    <script type="text/babel">
	      /*这里是代码*/
	    </script>
	  </body>
	</html>

*<script> 标签的 type 属性为 text/babel 。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。凡是使用 JSX 的地方，都要加上 type="text/babel" 。

渲染语法：
	ReactDOM.render(
	  <h1>Hello, world!</h1>,
	  document.getElementById('example')
	);

*render里面第二个参数必须使用JavaScript原生的getElementByID方法，不能使用jQuery来选取DOM节点。


组件属性：

1）获取属性的值用的是this.props.属性名

2）创建的组件名称首字母必须大写。

3）为元素添加css的class时，要用className。

4）组件的style属性的设置方式也值得注意，要写成style={{width: this.state.witdh}}。


组件创建语法：
	var HelloMessage = React.createClass({
	  render: function() {
	    return <h1>Hello {this.props.name}</h1>;
	  }
	});

	ReactDOM.render(
	  <HelloMessage name="John" />,
	  document.getElementById('example')
	);


*组件可以嵌套

示例代码：

/*用for循环返回jsx*/

var TabBar= React.createClass({
    //监听点击事件
    handleClick: function() {
        alert(1);
    },

    render: function() {
        var this_ = this;
        return (
            <ul>
                {                    
                    (function(){
                        //使用for循环将数据添加到数组里
                        var doms = [];              
                        for (var i = 0; i < menuName.length; i++) {
                          //需要给子元素添加一个key,作为唯一的标识,而且key值必须要连续
                          doms.push(<li key={i} onClick={this_.handleClick}><a>xxx</a></li>);
                        }
                        return doms;
                    })()
                }
            </ul>
        );
    }
});

//渲染标签栏
ReactDOM.render(
    <TabBar/>,
    document.getElementById('tabBar')
);


/*react组件嵌套*/

//定义菜单名称及图标名称
var menuName = [{"name":"home","cn":"首页"},
                {"name":"about","cn":"关于我们"},
                {"name":"product","cn":"产品中心"},
                {"name":"news","cn":"新闻资讯"},
                {"name":"contact","cn":"联系我们"}
                ];

//标签栏组件(用到组件嵌套)
var TabBar= React.createClass({
    //getInitialState 方法用于定义初始状态，当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法再次渲染组件
    getInitialState: function() {
        //设置显示标签的索引
        return {
            showTab: 0
        };
    },

    //通过子组件改变showTab值
    onChildChanged: function (newTab) {
        //刷新状态数据
        this.setState({
          showTab: newTab
        });
    },

    render: function() {
        //修改this指向
        var this_ = this;
        return (
            <ul> {
                //使用map遍历时,需要给子元素添加一个key,作为唯一的标识,而且key值必须连续
                menuName.map(function(k,index){
                    return (
                            <TabButton key={index} iconName={k.name} title={k.cn} initShowTab={this_.state.showTab} index={index} callbackParent={this_.onChildChanged}/>
                    )
                })
            } </ul>
        );
    }
});

//菜单按钮组件
var TabButton= React.createClass({
    getInitialState: function () {
        return {
         dataTab: this.props.initShowTab
        };
    },

    //点击改变showTab
    handleClick: function () {
        //将当前索引赋值给newTab
        var newTab = this.props.index;
        //刷新状态数据
        this.setState({
            dataTab: newTab
        });

        //这里要注意：setState 是一个异步方法，所以需要操作缓存的当前值
        this.props.callbackParent(newTab);
    },

    render: function() {
        //设置组件【TabButton】的状态数据
        var dataTab = this.state.dataTab;

        return (
            <li ref="tabBtn" className={this.props.index == this.props.initShowTab ? "on" : ""}>
                <a onClick={this.handleClick}>
                    <i className={"icon-"+this.props.iconName}></i>
                    <span>{this.props.title}</span>
                </a>
            </li>
        );
    }
});

//渲染菜单栏
ReactDOM.render(
    <TabBar/>,
    document.getElementById('tabBar')
);


/*react组件不嵌套调用点击事件*/

//定义菜单名称及图标名称
var menuName = [{"name":"home", "cn":"首页"},
                {"name":"about", "cn":"关于我们"},
                {"name":"product", "cn":"产品中心"},
                {"name":"news", "cn":"新闻资讯"},
                {"name":"contact", "cn":"联系我们"}
                ];

//标签栏组件(用到组件嵌套)
var TabBar= React.createClass({
    //getInitialState 方法用于定义初始状态，当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法再次渲染组件
    getInitialState: function() {
        //设置显示标签的索引
        return {
            showTab: 0
        };
    },

    //改变showTab值
    handleClick: function (index) {
        //刷新状态数据
        this.setState({
          showTab: index
        });
    },

    render: function() {
        //修改this指向
        var this_ = this;
        return (
            <ul> {
                //使用map遍历时,需要给子元素添加一个key,作为唯一的标识,而且key值必须连续
                //如果要传递参数则需要将this_.handleClick(k.index)改成onClick={function(){this_.handleClick(k.index)}，否则会自动立即执行
                menuName.map(function(k,index){
                    return (
                        <li ref="tabBtn" key={index} className={index == this_.state.showTab ? "on" : ""}>
                            <a onClick={function(){this_.handleClick(index)}}>
                                <i className={"icon-"+k.name}></i>
                                <span>{k.cn}</span>
                            </a>
                        </li>
                    )
                })
            } </ul>
        );
    }
});

//渲染菜单栏
ReactDOM.render(
    <TabBar/>,
    document.getElementById('tabBar')
);